import pychord
from typing import List, Callable
import musthe
import re

from .base import Base

DEGREE_DICT = dict(
    sorted(
        {
            "I": "C",
            "II": "D",
            "III": "E",
            "IV": "F",
            "V": "G",
            "VI": "A",
            "VII": "B",
        }.items(),
        key=lambda item: len(item[0]),
        reverse=True,
    )
)


class Chord(Base):
    def __init__(self, input: str):
        for chord_str, in_c in DEGREE_DICT.items():
            input = input.strip()
            input = input.replace(chord_str, in_c)
        self._chord: pychord.Chord = pychord.Chord(input)

    def _show_progress(self):
        return self._chord.chord

    def to_notes(self, scale: int) -> List[str]:
        tmp_chord = pychord.Chord(self._chord._chord)
        tmp_chord.transpose(scale)
        return chord_translate(tmp_chord)


def chord_translate(chord: pychord.Chord, base_oct: int = 3) -> List[str]:
    on = chord.on
    chord._on = None
    notes = chord.components_with_pitch(base_oct)

    max_notes = 5
    min_notes = 3
    original_note_len = len(notes)

    for i in range(max_notes - original_note_len):
        j = i + original_note_len - min_notes
        notes.append(up_octave(notes[j]))

    if on:
        if musthe.Note(notes[0]).number > musthe.Note(f"{on}{base_oct}").number:
            adjust = 0
        else:
            adjust = -1
        notes.insert(0, f"{on}{base_oct + adjust}")

    print(notes)
    return notes


def up_octave(note) -> str:
    return (musthe.Note(note) + musthe.Interval("P8")).scientific_notation()


# REGEX = re.compile(
#     r"([+я╝ЛтБ║тВКя╣в])|([тАСтАСтБ╗тВЛя╣гтИТ╦ЧуГ╝я╝Н-])|([я╝П/я╝╝\\])|([Aaя╝бя╜Б][Ddя╝дя╜Д]{2})|([Ooя╝пя╜П0я╝Р][Mmя╝ня╜Н][Iiя╝йя╜Й][Ttя╝┤я╜Ф]|[Nnя╝оя╜О][Ooя╝пя╜П0я╝Р])|([Ddя╝дя╜Д][Ooя╝пя╜П0я╝Р][Mmя╝ня╜Н](?![Iiя╝йя╜Й][Ttя╝┤я╜Ф])(?:[Iiя╝йя╜Й](?:[Nnя╝оя╜О](?:[Aaя╝бя╜Б](?:[Nnя╝оя╜О][Ttя╝┤я╜Ф]?)?)?)?)?)|([Aaя╝бя╜Б][Uuя╝╡я╜Х][Ggя╝зя╜З](?:[Mmя╝ня╜Н][Eeя╝ея╜Е](?:[Nnя╝оя╜О](?:[Ttя╝┤я╜Ф](?:[Eeя╝ея╜Е][Ddя╝дя╜Д]?)?)?)?)?)|([Ooя╝пя╜П0я╝Р][Nnя╝оя╜О])|([Ddя╝дя╜Д][Iiя╝йя╜Й][Mmя╝ня╜Н](?:[Iiя╝йя╜Й](?:[Nnя╝оя╜О](?:[Iiя╝йя╜Й](?:[Ssя╝│я╜У](?:[Hhя╝ия╜И](?:[Eeя╝ея╜Е][Ddя╝дя╜Д]?)?)?)?)?)?)?|[┬░┬║с╡Т╦ЪтБ░тИШуВЬя╛ЯтЧЛтЧжтЧптЪктнХя┐отнШOoя╝пя╜П0я╝Р])|([Hhя╝ия╜И](?:[Aaя╝бя╜Б](?:[Llя╝мя╜М][Ffя╝жя╜Ж]?)?)?[-тАСтАСтБ╗тВЛя╣гтИТ╦ЧуГ╝я╝Н 	 тАА-тАКтАптБЯуАА]*[Ddя╝дя╜Д][Iiя╝йя╜Й][Mmя╝ня╜Н](?:[Iiя╝йя╜Й](?:[Nnя╝оя╜О](?:[Iiя╝йя╜Й](?:[Ssя╝│я╜У](?:[Hhя╝ия╜И](?:[Eeя╝ея╜Е][Ddя╝дя╜Д]?)?)?)?)?)?)?|[├╕├ШтИЕтМА])|([Ssя╝│я╜У][Uuя╝╡я╜Х][Ssя╝│я╜У](?:[Ppя╝░я╜Р](?:[Eeя╝ея╜Е](?:[Nnя╝оя╜О](?:[Ddя╝дя╜Д](?:[Eeя╝ея╜Е][Ddя╝дя╜Д]?)?)?)?)?)?)|([Mmя╝ня╜Н][aя╜Б](?![Uuя╝╡я╜Х][Ggя╝зя╜З]|[Ddя╝дя╜Д]{2})(?:[Jjя╝кя╜К](?:[Ooя╝пя╜П0я╝Р][Rrя╝▓я╜Т]?)?)?|[Mя╝н╬ФтЦ│тИЖтЦ╡])|([Mmя╝ня╜Н][Iiя╝йя╜Й](?:[Nnя╝оя╜О](?:[Ooя╝пя╜П0я╝Р][Rrя╝▓я╜Т]?)?)?|[mя╜Н])|([я╝ИуАР\(])|([я╝ЙуАС\)])|([уАВя╝Оя╝МуАБуГ╗,.])|([Rrя╝▓я╜Т][Ooя╝пя╜П0я╝Р]{2}[Ttя╝┤я╜Ф])|((?:[Eeя╝ея╜Е][Llя╝мя╜М][Eeя╝ея╜Е][Vvя╝╢я╜Ц][Eeя╝ея╜Е][Nnя╝оя╜О]|[1я╝С]{2})(?:[Ttя╝┤я╜Ф][Hhя╝ия╜И])?)|((?:[Ttя╝┤я╜Ф][Hhя╝ия╜И][Iiя╝йя╜Й][Rrя╝▓я╜Т][Ttя╝┤я╜Ф][Eeя╝ея╜Е]{2}[Nnя╝оя╜О]|[1я╝С][3я╝У])(?:[Ttя╝┤я╜Ф][Hhя╝ия╜И])?)|([Ffя╝жя╜Ж][Iiя╝йя╜Й][Rrя╝▓я╜Т][Ssя╝│я╜У][Ttя╝┤я╜Ф]|[Ooя╝пя╜П0я╝Р][Nnя╝оя╜О][Eeя╝ея╜Е]|[1я╝С](?:[Ssя╝│я╜У][Ttя╝┤я╜Ф])?)|([Ssя╝│я╜У][Eeя╝ея╜Е][Ccя╝гя╜Г][Ooя╝пя╜П0я╝Р][Nnя╝оя╜О][Ddя╝дя╜Д]|[Ttя╝┤я╜Ф][Wwя╝╖я╜Ч][Ooя╝пя╜П0я╝Р]|[2я╝Т](?:[Nnя╝оя╜О][Ddя╝дя╜Д])?)|([Ttя╝┤я╜Ф][Hhя╝ия╜И](?:[Iiя╝йя╜Й][Rrя╝▓я╜Т][Ddя╝дя╜Д]|[Rrя╝▓я╜Т][Eeя╝ея╜Е]{2})|[3я╝У](?:[Rrя╝▓я╜Т][Ddя╝дя╜Д])?)|((?:[Ffя╝жя╜Ж][Ooя╝пя╜П0я╝Р][Uuя╝╡я╜Х][Rrя╝▓я╜Т]|4|я╝Ф)(?:[Ttя╝┤я╜Ф][Hhя╝ия╜И])?)|([Ffя╝жя╜Ж][Iiя╝йя╜Й](?:[Ffя╝жя╜Ж][Ttя╝┤я╜Ф][Hhя╝ия╜И]|[Vvя╝╢я╜Ц][Eeя╝ея╜Е])|[5я╝Х](?:[Ttя╝┤я╜Ф][Hhя╝ия╜И])?)|((?:[Ssя╝│я╜У][Iiя╝йя╜Й][Xxя╝╕я╜Ш├Ч]|6|я╝Ц)(?:[Ttя╝┤я╜Ф][Hhя╝ия╜И])?)|((?:[Ssя╝│я╜У][Eeя╝ея╜Е][Vvя╝╢я╜Ц][Eeя╝ея╜Е][Nnя╝оя╜О]|7|я╝Ч)(?:[Ttя╝┤я╜Ф][Hhя╝ия╜И])?)|([Nnя╝оя╜О][Iiя╝йя╜Й][Nnя╝оя╜О](?:[Ttя╝┤я╜Ф][Hhя╝ия╜И]|[Eeя╝ея╜Е])|[9я╝Щ](?:[Ttя╝┤я╜Ф][Hhя╝ия╜И])?)|([Ffя╝жя╜Ж][Llя╝мя╜М](?:[Aaя╝бя╜Б][Ttя╝┤я╜Ф]?)?|тЩн)|([bя╜В])|([Ssя╝│я╜У](?:[Hhя╝ия╜И](?:[Aaя╝бя╜Б](?:[Rrя╝▓я╜Т][Ppя╝░я╜Р]?)?)?)?|[#я╝ГтЩп])|([Ddя╝дя╜Д](?:[Ooя╝пя╜П0я╝Р][Uuя╝╡я╜Х][Bbя╝вя╜В][Llя╝мя╜М][Eeя╝ея╜Е]|[Bbя╝вя╜В][Llя╝мя╜М])[-тАСтАСтБ╗тВЛя╣гтИТ╦ЧуГ╝я╝Н 	 я╗┐тАА-тАКтАптБЯуАА]*(?:[Ffя╝жя╜Ж][Llя╝мя╜М](?:[Aaя╝бя╜Б][Ttя╝┤я╜Ф]?)?|тЩн)|ЁЭДл)|([Ddя╝дя╜Д](?:[Ooя╝пя╜П0я╝Р][Uuя╝╡я╜Х][Bbя╝вя╜В][Llя╝мя╜М][Eeя╝ея╜Е]|[Bbя╝вя╜В][Llя╝мя╜М])[-тАСтАСтБ╗тВЛя╣гтИТ╦ЧуГ╝я╝Н 	 я╗┐тАА-тАКтАптБЯуАА]*(?:[Ssя╝│я╜У](?:[Hhя╝ия╜И](?:[Aaя╝бя╜Б](?:[Rrя╝▓я╜Т][Ppя╝░я╜Р]?)?)?)?|[#я╝ГтЩп])|ЁЭДк|[Xxя╝╕я╜Ш├Ч])|([Ddя╝дя╜Д]?(?:[Ooя╝пя╜П0я╝Р][Uuя╝╡я╜Х][Bbя╝вя╜В][Llя╝мя╜М][Eeя╝ея╜Е]|[Bbя╝вя╜В][Llя╝мя╜М])[-тАСтАСтБ╗тВЛя╣гтИТ╦ЧуГ╝я╝Н 	 я╗┐тАА-тАКтАптБЯуАА]*(?:[Nnя╝оя╜О][Aaя╝бя╜Б](?:[Ttя╝┤я╜Ф](?:[Uuя╝╡я╜Х](?:[Rrя╝▓я╜Т](?:[Aaя╝бя╜Б][Llя╝мя╜М]?)?)?)?)?|тЩо))|([Aaя╝бя╜Б]|[Vvя╝╢я╜Ц][Iiя╝йя╜Й](?![Iiя╝йя╜Й])|[тЕетЕ╡])|([Bя╝в]|[Vvя╝╢я╜Ц][Iiя╝йя╜Й]{2}|[тЕжтЕ╢])|([Ccя╝гя╜Г]|[Iiя╝йя╜Й](?![Iiя╝йя╜ЙVvя╝╢я╜Ц])|[тЕатЕ░])|([Ddя╝дя╜Д]|[Iiя╝йя╜Й]{2}(?![Iiя╝йя╜Й])|[тЕбтЕ▒])|([Eeя╝ея╜Е]|[Iiя╝йя╜Й]{3}|[тЕвтЕ▓])|([Ffя╝жя╜Ж]|[Iiя╝йя╜Й][Vvя╝╢я╜Ц]|[тЕгтЕ│])|([Ggя╝зя╜З]|[Vvя╝╢я╜Ц](?![Iiя╝йя╜Й])|[тЕдтЕ┤])|([ 	 я╗┐тАА-тАКтАптБЯуАА]+)|([Nnя╝оя╜О](?:[Ooя╝пя╜П0я╝Р][Nnя╝оя╜О]?)?[-тАСтАСтБ╗тВЛя╣гтИТ╦ЧуГ╝я╝Н 	 тАА-тАКтАптБЯуААуАВя╝Оя╝МуАБуГ╗,.]*[Ccя╝гя╜Г](?:[Hhя╝ия╜И](?:[Ooя╝пя╜П0я╝Р](?:[Rrя╝▓я╜Т][Ddя╝дя╜Д]?)?)?)?[уАВя╝Оя╝МуАБуГ╗,.]*|[\^])"
# )


# def chord_translate(chord_str: str, base_oct: int = 3):
#     parts = [list(filter(lambda x: x != "", e))[0] for e in REGEX.findall(chord_str)]
#     chord = pychord.Chord(parts[0])
#     if chord.on:
#         return chord.components_with_pitch(base_oct - 1)
#     else:
#         return chord.components_with_pitch(base_oct)
